<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#
 string absolutePath = Host.ResolvePath("ModelRepo.xml");     
	XDocument xdoc = XDocument.Load(absolutePath);
	
    List<XElement> modelsConfig = (from e in xdoc.Descendants("model") select e).ToList();

var loader = new MetadataLoader(this);
var region = new CodeRegion(this);

var Code = new CodeGenerationTools(this);
var EFTools = new MetadataTools(this);
var ObjectNamespace = Code.VsNamespaceSuggestion();

    
   
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Core.Objects;
using SimpleWebApp.Common;
using SimpleWebApp.Common.Unity;

using Microsoft.Practices.Unity;

namespace SimpleWebApp.Data
{
	public partial class RepositoryUnityConfigurator : IUnityConfigurator
	{
		public RepositoryUnityConfigurator()
		{
		}

		public void Configure(Microsoft.Practices.Unity.IUnityContainer container)
		{
<# 
		foreach (XElement modelConfig in modelsConfig)
		{

		    string inputFile = (modelConfig.Attribute("edmxfile").Value);
		    var ItemCollection = loader.CreateEdmItemCollection(inputFile);
		    var ModelNamespace = loader.GetModelNamespace(inputFile);
		    EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
		    if (container == null)
		    {
		        return string.Empty;
		    }
#>

            //Register the contexts
            container.RegisterType<<#=Code.Escape(container) #>>(new PerResolveLifetimeManager());

            //Register the repositories
<#
		foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
		{
		    var keyProperties =
		        entity.Properties.Where(
		            p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && EFTools.IsKey(p));
		    var primaryKeyType = Code.Escape(keyProperties.First().TypeUsage);

		    var interfaceByKey = "IRepository";
            if(primaryKeyType.ToUpper()=="GUID" || primaryKeyType.ToUpper()=="SYSTEM.GUID")interfaceByKey = "IRepositoryGuid";
            if(primaryKeyType.ToUpper()=="STRING")interfaceByKey = "IRepositoryString";
			if(primaryKeyType.ToUpper()=="DECIMAL")interfaceByKey = "IRepositoryDecimal";
#>
			container.RegisterType<<#=interfaceByKey #><<#=Code.Escape(entity) #>>,R<#=Code.Escape(entity) #>>(new PerResolveLifetimeManager());
<#
		}
		}
#>

		}
	}
}


